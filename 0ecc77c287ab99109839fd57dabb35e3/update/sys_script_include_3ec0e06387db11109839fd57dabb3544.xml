<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.ITDQUERYAZURERESOURCES</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>ITDQUERYAZURERESOURCES</name>
        <script><![CDATA[var ITDQUERYAZURERESOURCES = Class.create();
ITDQUERYAZURERESOURCES.prototype = Object.extendsObject(AbstractAjaxProcessor, {

    getSubscriptions: function() {
        try {
            restMsgName = 'Azure_Windows_Linux_Rest_Message';
            var request = new sn_ws.RESTMessageV2(restMsgName, 'getSubscriptions');
            var response = request.execute();
            var httpStatus = response.getStatusCode();
            if (httpStatus == 200 || httpStatus == 201) {
                var responseBody = response.getBody();
                var parser = new JSONParser();
                var parsed = parser.parse(responseBody);
                var subscriptions = '';
                gs.log('Location responseBody :' + responseBody);
                for (var key in parsed['value']) {
                    subscriptions = parsed['value'][key]['subscriptionId'] + '#' + parsed['value'][key]['displayName'] + '|' + subscriptions;
                }

                // gs.log('subscriptions   getSubscriptions: ' + subscriptions);
            } else {
                gs.log('Error : getSubscriptions' + response.getBody() + 'status : ' + httpStatus);

            }
        } catch (ex) {
            gs.info("No Subscriptions Available catch line Exception : " + ex);
        }
        return subscriptions;
    },

    getResourceGroups: function() {
        try {
            restMsgName = 'Azure_Windows_Linux_Rest_Message';
            var subscriptionId = this.getParameter('sysparm_subscriptionId').toString();
            var request = new sn_ws.RESTMessageV2(restMsgName, 'getResourcegroup');
            request.setStringParameterNoEscape('subscriptionId', subscriptionId);
            var response = request.execute();
            var httpStatus = response.getStatusCode();
            if (httpStatus == 200 || httpStatus == 201) {
                var responseBody = response.getBody();
                var parser = new JSONParser();
                var parsed = parser.parse(responseBody);
                var resourceGroups = '';
                gs.log('Location responseBody :' + responseBody);
                for (var key in parsed['value']) {
                    //resourceGroups = ((parsed['value'][key]['name'])) + '|' + resourceGroups;
                    resourceGroups = parsed['value'][key]['name'] + '|' + resourceGroups;
                }

                // gs.log('ResourceGroup  resourceGroups : ' + resourceGroups);
            } else {
                gs.log('Error : getResourceGroups' + response.getBody() + 'status : ' + httpStatus);

            }
        } catch (ex) {
            gs.info("No Resourse group Available catch line Exception : " + ex);
        }
        return resourceGroups;
    },
    getVMSizeNames: function() {

        try {
            var locationName = this.getParameter('sysparm_locationName').toString();
            var subscriptionId = this.getParameter('sysparm_subscriptionId').toString();
            // var resourceGrpId = this.getParameter('sysparm_resourceGrpId').toString();
            var restMsgName = 'Azure_Windows_Linux_Rest_Message';

            var request = new sn_ws.RESTMessageV2(restMsgName, 'getVMSizes');
            request.setStringParameter('location', locationName);
            request.setStringParameterNoEscape('subscriptionId', subscriptionId);
            // request.setStringParameterNoEscape('resourceGrpId', resourceGrpId);
            var endpoint = request.getEndpoint();
            var response = request.execute();
            var httpStatus = response.getStatusCode();

            if (httpStatus == 200 || httpStatus == 201) {
                var responseBody = response.getBody();
                var parser = new JSONParser();
                var parsed = parser.parse(responseBody);
                var vmSizeNames = '';
                for (var key in parsed['value']) {
                    vmSizeNames = ((parsed['value'][key]['name'])) + '|' + vmSizeNames;
                }
            } else {
                vmSizeNames = 'No VMSizes Available for this Location';
                gs.log('No VMSizes Available for this Location');
            }
        } catch (ex) {
            gs.info("No VMSizes Available catch line Exception : " + ex + "\nResponse : " + JSON.stringify(response) + "\nhttpstatus :" + httpStatus);
        }
        return vmSizeNames;
    },
    getVirtualNetworks: function() {
        try {
            restMsgName = 'Azure_Windows_Linux_Rest_Message';
            var subscriptionId = this.getParameter('sysparm_subscriptionId').toString();
            var request = new sn_ws.RESTMessageV2(restMsgName, 'getVnetList');
            request.setStringParameterNoEscape('subscriptionId', subscriptionId);
            var response = request.execute();
            var httpStatus = response.getStatusCode();
            if (httpStatus == 200 || httpStatus == 201) {
                var responseBody = response.getBody();
                var parser = new JSONParser();
                var parsed = parser.parse(responseBody);
                var resourceGroups = '';
                gs.log('Location responseBody :' + responseBody);
                for (var key in parsed['value']) {
                    // resourceGroups = ((parsed['value'][key]['name'])) + '|' + resourceGroups;
                    resourceGroups = parsed['value'][key]['name'] + '|' + resourceGroups;
                }

                // gs.log('ResourceGroup  resourceGroups : ' + resourceGroups);
            } else {
                gs.log('Error : getResourceGroups' + response.getBody() + 'status : ' + httpStatus);

            }
        } catch (ex) {
            gs.info("No getVirtualNetworks Available catch line Exception : " + ex + "\nResponse : " + JSON.stringify(response) + "\nhttpstatus :" + httpStatus);
        }
        return resourceGroups;
    },
    getReferenceVMS: function() {

        try {
            var subscriptionId = this.getParameter('sysparm_subscriptionId').toString();
            var resourcegroup = this.getParameter('sysparm_resourcegroup').toString();

            var restMsgName = 'Azure_Windows_Linux_Rest_Message';

            var request = new sn_ws.RESTMessageV2(restMsgName, 'getReferenceVM');

            request.setStringParameterNoEscape('subscriptionId', subscriptionId);
            request.setStringParameterNoEscape('resourcegroup', resourcegroup);
            var endpoint = request.getEndpoint();
            var response = request.execute();
            var httpStatus = response.getStatusCode();

            if (httpStatus == 200 || httpStatus == 201) {
                var responseBody = response.getBody();
                var parser = new JSONParser();
                var parsed = parser.parse(responseBody);
                var vmNames = '';
                for (var key in parsed['data']) {
                    vmNames = ((parsed['data'][key]['name'])) + '|' + vmNames;
                }
            } else {
                gs.log('No vmNames Available ');
            }
        } catch (ex) {
            gs.info("No vmNames Available catch line Exception : " + ex + "\nResponse : " + JSON.stringify(response) + "\nhttpstatus :" + httpStatus);
        }
        return vmNames;
    },
    getRegionLists: function() {
        try {
            restMsgName = 'Azure_Windows_Linux_Rest_Message';
            var subscriptionId = this.getParameter('sysparm_subscriptionId').toString();
            var request = new sn_ws.RESTMessageV2(restMsgName, 'getLocations');
            request.setStringParameterNoEscape('subscriptionId', subscriptionId);
            var response = request.execute();
            var httpStatus = response.getStatusCode();
            if (httpStatus == 200 || httpStatus == 201) {
                var responseBody = response.getBody();
                var parser = new JSONParser();
                var parsed = parser.parse(responseBody);
                var regionList = '';

                for (var key in parsed['value']) {
                    regionList = parsed['value'][key]['name'] + '#' + parsed['value'][key]['displayName'] + '|' + regionList;
                }
                gs.log('regionList  : ' + regionList);
            } else {
                gs.log('Error : getRegionLists' + response.getBody() + 'status : ' + httpStatus);

            }
        } catch (ex) {
            gs.info("No regionList Available catch line Exception : " + ex);
        }
        return regionList;
    },

    isPublic: function() {
        return true;
    },

    type: 'ITDQUERYAZURERESOURCES'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-11-27 06:20:34</sys_created_on>
        <sys_id>3ec0e06387db11109839fd57dabb3544</sys_id>
        <sys_mod_count>35</sys_mod_count>
        <sys_name>ITDQUERYAZURERESOURCES</sys_name>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_scope display_value="Azure Service Catalogs">0ecc77c287ab99109839fd57dabb35e3</sys_scope>
        <sys_update_name>sys_script_include_3ec0e06387db11109839fd57dabb3544</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-12-07 04:31:07</sys_updated_on>
    </sys_script_include>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="Azure Service Catalogs">0ecc77c287ab99109839fd57dabb35e3</claim_owner_scope>
        <claim_timestamp>184eada04b50000001</claim_timestamp>
        <metadata_update_name>sys_script_include_3ec0e06387db11109839fd57dabb3544</metadata_update_name>
        <previous_claim_app_version>1.0.0</previous_claim_app_version>
        <previous_claim_name>Azure Service Catalogs</previous_claim_name>
        <previous_claim_scope>0ecc77c287ab99109839fd57dabb35e3</previous_claim_scope>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-07 04:31:07</sys_created_on>
        <sys_id>399e7ba287e71d109839fd57dabb35ce</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-12-07 04:31:07</sys_updated_on>
    </sys_claim>
</record_update>
